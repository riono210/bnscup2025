//# include <Siv3D.hpp> // Siv3D v0.6.16
//
//void Main()
//{
//	// 背景の色を設定する | Set the background color
//	Scene::SetBackground(ColorF{ 0.6, 0.8, 0.7 });
//
//	// 画像ファイルからテクスチャを作成する | Create a texture from an image file
//	const Texture texture{ U"example/windmill.png" };
//
//	// 絵文字からテクスチャを作成する | Create a texture from an emoji
//	const Texture emoji{ U"🦖"_emoji };
//
//	// 太文字のフォントを作成する | Create a bold font with MSDF method
//	const Font font{ FontMethod::MSDF, 48, Typeface::Bold };
//
//	// テキストに含まれる絵文字のためのフォントを作成し、font に追加する | Create a font for emojis in text and add it to font as a fallback
//	const Font emojiFont{ 48, Typeface::ColorEmoji };
//	font.addFallback(emojiFont);
//
//	// ボタンを押した回数 | Number of button presses
//	int32 count = 0;
//
//	// チェックボックスの状態 | Checkbox state
//	bool checked = false;
//
//	// プレイヤーの移動スピード | Player's movement speed
//	double speed = 200.0;
//
//	// プレイヤーの X 座標 | Player's X position
//	double playerPosX = 400;
//
//	// プレイヤーが右を向いているか | Whether player is facing right
//	bool isPlayerFacingRight = true;
//
//	while (System::Update())
//	{
//		// テクスチャを描く | Draw the texture
//		texture.draw(20, 20);
//
//		// テキストを描く | Draw text
//		font(U"Hello, Siv3D!🎮").draw(64, Vec2{ 20, 340 }, ColorF{ 0.2, 0.4, 0.8 });
//
//		// 指定した範囲内にテキストを描く | Draw text within a specified area
//		font(U"Siv3D (シブスリーディー) は、ゲームやアプリを楽しく簡単な C++ コードで開発できるフレームワークです。")
//			.draw(18, Rect{ 20, 430, 480, 200 }, Palette::Black);
//
//		// 長方形を描く | Draw a rectangle
//		Rect{ 540, 20, 80, 80 }.draw();
//
//		// 角丸長方形を描く | Draw a rounded rectangle
//		RoundRect{ 680, 20, 80, 200, 20 }.draw(ColorF{ 0.0, 0.4, 0.6 });
//
//		// 円を描く | Draw a circle
//		Circle{ 580, 180, 40 }.draw(Palette::Seagreen);
//
//		// 矢印を描く | Draw an arrow
//		Line{ 540, 330, 760, 260 }.drawArrow(8, SizeF{ 20, 20 }, ColorF{ 0.4 });
//
//		// 半透明の円を描く | Draw a semi-transparent circle
//		Circle{ Cursor::Pos(), 40 }.draw(ColorF{ 1.0, 0.0, 0.0, 0.5 });
//
//		// ボタン | Button
//		if (SimpleGUI::Button(U"count: {}"_fmt(count), Vec2{ 520, 370 }, 120, (checked == false)))
//		{
//			// カウントを増やす | Increase the count
//			++count;
//		}
//
//		// チェックボックス | Checkbox
//		SimpleGUI::CheckBox(checked, U"Lock \U000F033E", Vec2{ 660, 370 }, 120);
//
//		// スライダー | Slider
//		SimpleGUI::Slider(U"speed: {:.1f}"_fmt(speed), speed, 100, 400, Vec2{ 520, 420 }, 140, 120);
//
//		// 左キーが押されていたら | If left key is pressed
//		if (KeyLeft.pressed())
//		{
//			// プレイヤーが左に移動する | Player moves left
//			playerPosX = Max((playerPosX - speed * Scene::DeltaTime()), 60.0);
//			isPlayerFacingRight = false;
//		}
//
//		// 右キーが押されていたら | If right key is pressed
//		if (KeyRight.pressed())
//		{
//			// プレイヤーが右に移動する | Player moves right
//			playerPosX = Min((playerPosX + speed * Scene::DeltaTime()), 740.0);
//			isPlayerFacingRight = true;
//		}
//
//		// プレイヤーを描く | Draw the player
//		emoji.scaled(0.75).mirrored(isPlayerFacingRight).drawAt(playerPosX, 540);
//	}
//}
//
////
//// - Debug ビルド: プログラムの最適化を減らす代わりに、エラーやクラッシュ時に詳細な情報を得られます。
////
//// - Release ビルド: 最大限の最適化でビルドします。
////
//// - [デバッグ] メニュー → [デバッグの開始] でプログラムを実行すると、[出力] ウィンドウに詳細なログが表示され、エラーの原因を探せます。
////
//// - Visual Studio を更新した直後は、プログラムのリビルド（[ビルド]メニュー → [ソリューションのリビルド]）が必要な場合があります。
////


// #include <Siv3D.hpp> // OpenSiv3D v0.6.6
// #include <btBulletDynamicsCommon.h>

// void Main() {
// 	///			 ///
// 	/// 空間の作成 ///
// 	///			 ///

// 	// 重力
// 	btVector3 gravity{ 0, -9.8, 0 };

// 	// 衝突検知方法の設定
// 	btCollisionConfiguration* config = new btDefaultCollisionConfiguration{ };
// 	btCollisionDispatcher* dispatcher = new btCollisionDispatcher{ config };

// 	// ブロードフェーズ法の設定
// 	btDbvtBroadphase* broadphase = new btDbvtBroadphase{ };

// 	// 拘束(剛体間リンク)のソルバ設定
// 	btSequentialImpulseConstraintSolver* solver = new btSequentialImpulseConstraintSolver{ };

// 	// 空間の作成
// 	btDynamicsWorld* world = new btDiscreteDynamicsWorld{ dispatcher, broadphase, solver, config };

// 	// 重力の設定
// 	world->setGravity(gravity);

// 	///			 ///
// 	/// 剛体の作成 ///
// 	///			 ///

// 	// 質量
// 	double mass = 1.0;

// 	// 中心位置
// 	btVector3 center{ 0, 0, 0 };

// 	// 形状の設定 (箱)
// 	btCollisionShape* shape = new btBoxShape{ btVector3{ 1, 1, 1 } };

// 	// 初期位置と姿勢
// 	btMotionState* state = new btDefaultMotionState{ btTransform{ btQuaternion::getIdentity(), center } };

// 	// 剛体の作成
// 	btRigidBody* box = new btRigidBody{ mass, state, shape, center };

// 	// 空間に追加
// 	world->addRigidBody(box);

// 	// システムループ
// 	while (System::Update()) {
// 		ClearPrint();

// 		// Bulletのステップを進める
// 		world->stepSimulation(Scene::DeltaTime());

// 		// 位置の取得
// 		btVector3 pos = box->getCenterOfMassPosition();

// 		// 位置の表示
// 		Print << U"box position: {:.2F}, {:.2F}, {:.2F}"_fmt(pos.x(), pos.y(), pos.z());
// 	}

// 	// 剛体を空間から削除
// 	world->removeRigidBody(box);

// 	// 剛体の削除
// 	delete shape;
// 	delete state;
// 	delete box;

// 	// 空間の削除
// 	delete config;
// 	delete dispatcher;
// 	delete broadphase;
// 	delete solver;
// 	delete world;
// }

#include <Siv3D.hpp> // OpenSiv3D v0.6.16
#include "SivBullet.hpp"


void Main() {
	// 3D シーンを描く、マルチサンプリング対応レンダーテクスチャ
	const MSRenderTexture rt{ Scene::Size(), TextureFormat::R8G8B8A8_Unorm_SRGB, HasDepth::Yes };
	// 背景色 (removeSRGBCurve() で sRGB カーブを除去)
	Color bgColor = Palette::Skyblue.removeSRGBCurve();

	// デバッグカメラ
	DebugCamera3D camera{ rt.size(), 60_deg, Vec3{0, 30, -100}, Vec3{0, 0, 0} };

	// シミュレーション空間の定義 (重力 Vec3{ 0, -9.8, 0 })
	DynamicsWorld world{ Vec3{ 0, -9.8, 0 } };

	// 床
	// 質量 0.0 で { 0, 0, 0 } に { 100, 0.1, 100 } の大きさの箱
	auto ground = world.createBox(Vec3{ 0, 0, 0 }, Vec3{ 100, 0.1, 100 }, 0.0);

	// 箱の配列
	Array<BulletBody> boxes;

	// システムループ
	while (System::Update()) {
		// 空間の更新
		world.update(Scene::DeltaTime());

		// Enterキーで箱を追加
		if (KeyEnter.down()) {
			boxes << world.createBox(Vec3{ Random(-50, 50), 50, Random(-50, 50)}, Vec3{1, 1, 1}, 1.0);
		}

		// カメラの更新
		camera.update(50.0f);

		// カメラを3D空間に設定
		Graphics3D::SetCameraTransform(camera);

		// [3D 描画]
		{
			const ScopedRenderTarget3D target{ rt.clear(bgColor) };

			// 床の描画
			ground.draw();
			// 箱の描画
			for (const auto& box : boxes) {
				box.draw();
			}
		}

		// [3D を 2D に描画]
		{
			Graphics3D::Flush();
			rt.resolve();
			Shader::LinearToScreen(rt);
		}
	}
}